generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  price       Int
  description String
  image       String
  category    String        @default("その他")
  stock       Int          @default(0)  // 在庫数を追加
  stockAlert  Int          @default(5)  // 在庫アラート閾値
  isNew       Boolean       @default(false)
  isFeatured  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  StockLog    StockLog[]    // 在庫履歴との関連
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  total         Int
  status        String      @default("pending")
  shippingInfo  Json
  paymentInfo   Json?
  emailSent     Boolean     @default(false)  // メール送信状態を追加
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  size      String?
  price     Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

// 在庫履歴テーブルを追加
model StockLog {
  id          String   @id @default(cuid())
  productId   String
  quantity    Int      // 変更量（増減）
  type        String   // "in" or "out"
  reason      String   // "purchase", "adjustment", "order" など
  createdAt   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id])
}